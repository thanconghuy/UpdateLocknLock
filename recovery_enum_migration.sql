-- ====================================
-- RECOVERY ENUM MIGRATION
-- X·ª≠ l√Ω m·ªçi tr∆∞·ªùng h·ª£p c√≥ th·ªÉ - k·ªÉ c·∫£ khi ƒë√£ b·ªã drop column
-- ====================================

-- B∆Ø·ªöC 1: Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
SELECT
    '=== KI·ªÇM TRA COLUMNS HI·ªÜN T·∫†I ===' as info,
    column_name,
    data_type,
    udt_name,
    is_nullable
FROM information_schema.columns
WHERE table_name = 'user_profiles'
AND column_name LIKE '%role%'
ORDER BY column_name;

-- Ki·ªÉm tra enums hi·ªán c√≥
SELECT '=== ENUM HI·ªÜN T·∫†I ===' as info;
SELECT typname as enum_name
FROM pg_type
WHERE typname LIKE '%role%'
AND typtype = 'e';

-- B∆Ø·ªöC 2: Ph√¢n t√≠ch t√¨nh hu·ªëng v√† ph·ª•c h·ªìi
DO $$
DECLARE
    has_role BOOLEAN;
    has_role_backup BOOLEAN;
    has_role_new BOOLEAN;
    has_role_v2 BOOLEAN;
    enum_exists BOOLEAN;
    enum_v2_exists BOOLEAN;
BEGIN
    -- Ki·ªÉm tra c√°c columns t·ªìn t·∫°i
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'user_profiles' AND column_name = 'role'
    ) INTO has_role;

    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'user_profiles' AND column_name = 'role_backup'
    ) INTO has_role_backup;

    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'user_profiles' AND column_name = 'role_new'
    ) INTO has_role_new;

    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'user_profiles' AND column_name = 'role_v2'
    ) INTO has_role_v2;

    -- Ki·ªÉm tra enums
    SELECT EXISTS (
        SELECT 1 FROM pg_type WHERE typname = 'user_role'
    ) INTO enum_exists;

    SELECT EXISTS (
        SELECT 1 FROM pg_type WHERE typname = 'user_role_v2'
    ) INTO enum_v2_exists;

    RAISE NOTICE 'Status: role=%, role_backup=%, role_new=%, role_v2=%, enum=%, enum_v2=%',
        has_role, has_role_backup, has_role_new, has_role_v2, enum_exists, enum_v2_exists;

    -- TR∆Ø·ªúNG H·ª¢P 1: Column role b·ªã m·∫•t nh∆∞ng c√≥ backup
    IF NOT has_role AND has_role_backup THEN
        RAISE NOTICE 'CASE 1: Recovering from role_backup';

        -- T·∫°o enum m·ªõi n·∫øu ch∆∞a c√≥
        IF NOT enum_v2_exists THEN
            CREATE TYPE user_role_v2 AS ENUM (
                'admin', 'manager', 'product_editor', 'project_viewer', 'viewer'
            );
        END IF;

        -- T·∫°o column role_v2 n·∫øu ch∆∞a c√≥
        IF NOT has_role_v2 THEN
            ALTER TABLE user_profiles ADD COLUMN role_v2 user_role_v2 DEFAULT 'viewer';
        END IF;

        -- Restore t·ª´ backup
        UPDATE user_profiles SET role_v2 =
            CASE
                WHEN role_backup = 'admin' THEN 'admin'::user_role_v2
                WHEN role_backup = 'manager' THEN 'manager'::user_role_v2
                WHEN role_backup IN ('editor', 'product_editor') THEN 'product_editor'::user_role_v2
                WHEN role_backup = 'project_viewer' THEN 'project_viewer'::user_role_v2
                ELSE 'viewer'::user_role_v2
            END;

    -- TR∆Ø·ªúNG H·ª¢P 2: C√≥ role_v2 nh∆∞ng thi·∫øu role ch√≠nh
    ELSIF NOT has_role AND has_role_v2 THEN
        RAISE NOTICE 'CASE 2: role_v2 exists, need to finalize';
        -- S·∫Ω x·ª≠ l√Ω ·ªü b∆∞·ªõc sau

    -- TR∆Ø·ªúNG H·ª¢P 3: Column role v·∫´n t·ªìn t·∫°i - migration b√¨nh th∆∞·ªùng
    ELSIF has_role THEN
        RAISE NOTICE 'CASE 3: Normal migration needed';

        -- Clean up previous attempts
        IF has_role_new THEN
            DROP COLUMN role_new;
        END IF;
        IF has_role_v2 THEN
            DROP COLUMN role_v2;
        END IF;
        IF enum_v2_exists THEN
            DROP TYPE user_role_v2 CASCADE;
        END IF;

        -- T·∫°o backup n·∫øu ch∆∞a c√≥
        IF NOT has_role_backup THEN
            ALTER TABLE user_profiles ADD COLUMN role_backup TEXT;
            UPDATE user_profiles SET role_backup = role::TEXT;
        END IF;

        -- T·∫°o enum v√† column m·ªõi
        CREATE TYPE user_role_v2 AS ENUM (
            'admin', 'manager', 'product_editor', 'project_viewer', 'viewer'
        );

        ALTER TABLE user_profiles ADD COLUMN role_v2 user_role_v2 DEFAULT 'viewer';

        UPDATE user_profiles SET role_v2 =
            CASE
                WHEN role::TEXT = 'admin' THEN 'admin'::user_role_v2
                WHEN role::TEXT = 'manager' THEN 'manager'::user_role_v2
                WHEN role::TEXT IN ('editor', 'product_editor') THEN 'product_editor'::user_role_v2
                WHEN role::TEXT = 'project_viewer' THEN 'project_viewer'::user_role_v2
                ELSE 'viewer'::user_role_v2
            END;

    -- TR∆Ø·ªúNG H·ª¢P 4: M·∫•t h·∫øt data
    ELSE
        RAISE NOTICE 'CASE 4: Complete data loss - creating fresh';

        -- T·∫°o enum v2 n·∫øu ch∆∞a c√≥
        IF NOT enum_v2_exists THEN
            CREATE TYPE user_role_v2 AS ENUM (
                'admin', 'manager', 'product_editor', 'project_viewer', 'viewer'
            );
        END IF;

        -- T·∫°o column m·ªõi v·ªõi default admin cho user ƒë·∫ßu ti√™n
        IF NOT has_role_v2 THEN
            ALTER TABLE user_profiles ADD COLUMN role_v2 user_role_v2 DEFAULT 'viewer';
            -- Set admin cho user ƒë·∫ßu ti√™n
            UPDATE user_profiles SET role_v2 = 'admin'::user_role_v2
            WHERE id = (SELECT id FROM user_profiles ORDER BY created_at LIMIT 1);
        END IF;

        -- T·∫°o backup column
        IF NOT has_role_backup THEN
            ALTER TABLE user_profiles ADD COLUMN role_backup TEXT DEFAULT 'viewer';
            UPDATE user_profiles SET role_backup =
                CASE WHEN role_v2 = 'admin'::user_role_v2 THEN 'admin' ELSE 'viewer' END;
        END IF;
    END IF;

END $$;

-- B∆Ø·ªöC 3: Hi·ªÉn th·ªã tr·∫°ng th√°i sau recovery
SELECT
    '=== TR·∫†NG TH√ÅI SAU RECOVERY ===' as info,
    id,
    email,
    role_backup,
    role_v2::TEXT as new_role
FROM user_profiles
ORDER BY created_at;

-- B∆Ø·ªöC 4: Finalize migration (ch·ªâ n·∫øu c√≥ role_v2)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'user_profiles' AND column_name = 'role_v2') THEN

        -- Disable RLS
        ALTER TABLE user_profiles DISABLE ROW LEVEL SECURITY;
        ALTER TABLE system_settings DISABLE ROW LEVEL SECURITY;

        -- Drop old policies
        DROP POLICY IF EXISTS "Admins can manage all users" ON user_profiles;
        DROP POLICY IF EXISTS "Admin only access to system_settings" ON system_settings;
        DROP POLICY IF EXISTS "Users can view their own profile" ON user_profiles;
        DROP POLICY IF EXISTS "Users can update their own profile" ON user_profiles;

        -- Drop old enum if exists
        IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
            DROP TYPE user_role CASCADE;
        END IF;

        -- Rename enum and column
        ALTER TYPE user_role_v2 RENAME TO user_role;
        ALTER TABLE user_profiles RENAME COLUMN role_v2 TO role;

        -- Set constraints
        ALTER TABLE user_profiles ALTER COLUMN role SET NOT NULL;

        -- Create new policies
        CREATE POLICY "Users can view their own profile" ON user_profiles
            FOR SELECT USING (auth.uid() = id);

        CREATE POLICY "Users can update their own profile" ON user_profiles
            FOR UPDATE USING (auth.uid() = id);

        CREATE POLICY "Admins can manage all users" ON user_profiles
            FOR ALL USING (
                EXISTS (
                    SELECT 1 FROM user_profiles up
                    WHERE up.id = auth.uid() AND up.role = 'admin'
                )
            );

        CREATE POLICY "Admin only access to system_settings" ON system_settings
            FOR ALL USING (
                EXISTS (
                    SELECT 1 FROM user_profiles up
                    WHERE up.id = auth.uid() AND up.role = 'admin'
                )
            );

        -- Enable RLS
        ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
        ALTER TABLE system_settings ENABLE ROW LEVEL SECURITY;

        RAISE NOTICE 'Migration finalized successfully';
    ELSE
        RAISE NOTICE 'No role_v2 column found - migration may have failed';
    END IF;
END $$;

-- B∆Ø·ªöC 5: K·∫øt qu·∫£ cu·ªëi c√πng
SELECT
    '=== K·∫æT QU·∫¢ CU·ªêI C√ôNG ===' as info,
    id,
    email,
    role::TEXT as current_role,
    role_backup as original_backup,
    CASE
        WHEN role IS NOT NULL THEN '‚úÖ SUCCESS'
        ELSE '‚ùå FAILED'
    END as migration_status
FROM user_profiles
ORDER BY created_at;

-- Hi·ªÉn th·ªã enum m·ªõi
SELECT '=== ENUM M·ªöI ===' as info;
SELECT unnest(enum_range(NULL::user_role)) as available_roles;

-- Clean up (uncomment khi ƒë√£ ·ªïn)
-- ALTER TABLE user_profiles DROP COLUMN IF EXISTS role_backup;

SELECT 'üéâ RECOVERY MIGRATION COMPLETED!' as final_status;
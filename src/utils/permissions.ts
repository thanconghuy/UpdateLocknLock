import { UserRole, RolePermissions, UserProfile } from '../types/auth'

// ƒê·ªãnh nghƒ©a quy·ªÅn m·∫∑c ƒë·ªãnh cho t·ª´ng role
export const DEFAULT_PERMISSIONS: Record<UserRole, RolePermissions> = {
  [UserRole.ADMIN]: {
    // System permissions
    canManageUsers: true,
    canManageSettings: true,
    canViewAllLogs: true,
    canManageSystem: true,

    // Project permissions
    canCreateProjects: true,
    canDeleteProjects: true,
    canViewAllProjects: true,
    canManageOwnProjects: true,
    canManageProjectMembers: true,

    // Product permissions
    canEditProducts: true,
    canImportData: true,
    canExportData: true,
    canViewProducts: true,

    // Report permissions
    canViewAllReports: true,
    canViewOwnReports: true,
    canExportReports: true,

    // No limits for admin
    maxProjects: undefined,
    maxTeamMembers: undefined,
  },

  [UserRole.MANAGER]: {
    // System permissions
    canManageUsers: false,
    canManageSettings: false,
    canViewAllLogs: false,
    canManageSystem: false,

    // Project permissions
    canCreateProjects: true,
    canDeleteProjects: false, // Ch·ªâ delete project c·ªßa m√¨nh
    canViewAllProjects: true,  // C√≥ th·ªÉ xem t·∫•t c·∫£ ƒë·ªÉ h·ªçc h·ªèi (read-only)
    canManageOwnProjects: true,
    canManageProjectMembers: true,

    // Product permissions
    canEditProducts: true,
    canImportData: true,
    canExportData: true,
    canViewProducts: true,

    // Report permissions
    canViewAllReports: false,
    canViewOwnReports: true,
    canExportReports: true,

    // Limits
    maxProjects: 10,
    maxTeamMembers: 5,
  },

  [UserRole.PRODUCT_EDITOR]: {
    // System permissions
    canManageUsers: false,
    canManageSettings: false,
    canViewAllLogs: false,
    canManageSystem: false,

    // Project permissions
    canCreateProjects: false,
    canDeleteProjects: false,
    canViewAllProjects: false,
    canManageOwnProjects: false,
    canManageProjectMembers: false,

    // Product permissions
    canEditProducts: true,
    canImportData: true,
    canExportData: false,
    canViewProducts: true,

    // Report permissions
    canViewAllReports: false,
    canViewOwnReports: true,
    canExportReports: false,

    // No project limits but can't create
    maxProjects: 0,
    maxTeamMembers: 0,
  },

  [UserRole.PROJECT_VIEWER]: {
    // System permissions
    canManageUsers: false,
    canManageSettings: false,
    canViewAllLogs: false,
    canManageSystem: false,

    // Project permissions
    canCreateProjects: false,
    canDeleteProjects: false,
    canViewAllProjects: false,
    canManageOwnProjects: false,
    canManageProjectMembers: false,

    // Product permissions
    canEditProducts: false,
    canImportData: false,
    canExportData: false,
    canViewProducts: true,

    // Report permissions
    canViewAllReports: false,
    canViewOwnReports: true,
    canExportReports: false,

    // No creation limits
    maxProjects: 0,
    maxTeamMembers: 0,
  },

  [UserRole.VIEWER]: {
    // System permissions
    canManageUsers: false,
    canManageSettings: false,
    canViewAllLogs: false,
    canManageSystem: false,

    // Project permissions
    canCreateProjects: false,
    canDeleteProjects: false,
    canViewAllProjects: false,
    canManageOwnProjects: false,
    canManageProjectMembers: false,

    // Product permissions
    canEditProducts: false,
    canImportData: false,
    canExportData: false,
    canViewProducts: false, // Ch·ªâ xem ƒë∆∞·ª£c khi ƒë∆∞·ª£c giao

    // Report permissions
    canViewAllReports: false,
    canViewOwnReports: false,
    canExportReports: false,

    // No limits
    maxProjects: 0,
    maxTeamMembers: 0,
  },
}

// Helper functions ƒë·ªÉ ki·ªÉm tra quy·ªÅn
export class PermissionChecker {
  private userProfile: UserProfile
  private permissions: RolePermissions

  constructor(userProfile: UserProfile) {
    this.userProfile = userProfile
    this.permissions = this.getUserPermissions()
  }

  private getUserPermissions(): RolePermissions {
    // N·∫øu user c√≥ custom permissions, merge v·ªõi default
    const defaultPerms = DEFAULT_PERMISSIONS[this.userProfile.role]
    const customPerms = this.userProfile.permissions || {}

    return {
      ...defaultPerms,
      ...customPerms,
    }
  }

  // System permissions
  canManageUsers(): boolean {
    return this.permissions.canManageUsers
  }

  canManageSettings(): boolean {
    return this.permissions.canManageSettings
  }

  canViewAllLogs(): boolean {
    return this.permissions.canViewAllLogs
  }

  canManageSystem(): boolean {
    return this.permissions.canManageSystem
  }

  // Project permissions
  canCreateProjects(): boolean {
    if (!this.permissions.canCreateProjects) return false

    // Ki·ªÉm tra limit n·∫øu c√≥
    const maxProjects = this.permissions.maxProjects || this.userProfile.max_projects
    if (maxProjects && maxProjects <= 0) return false

    return true
  }

  canDeleteProjects(): boolean {
    return this.permissions.canDeleteProjects
  }

  canViewAllProjects(): boolean {
    return this.permissions.canViewAllProjects
  }

  canManageOwnProjects(): boolean {
    return this.permissions.canManageOwnProjects
  }

  canManageProjectMembers(): boolean {
    return this.permissions.canManageProjectMembers
  }

  // Product permissions
  canEditProducts(): boolean {
    return this.permissions.canEditProducts
  }

  canImportData(): boolean {
    return this.permissions.canImportData
  }

  canExportData(): boolean {
    return this.permissions.canExportData
  }

  canViewProducts(): boolean {
    return this.permissions.canViewProducts
  }

  // Report permissions
  canViewAllReports(): boolean {
    return this.permissions.canViewAllReports
  }

  canViewOwnReports(): boolean {
    return this.permissions.canViewOwnReports
  }

  canExportReports(): boolean {
    return this.permissions.canExportReports
  }

  // Project-specific permissions
  canAccessProject(projectId: string, userProjectRole?: string): boolean {
    // Admin c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£
    if (this.userProfile.role === UserRole.ADMIN) return true

    // N·∫øu c√≥ role trong project c·ª• th·ªÉ
    if (userProjectRole) return true

    // N·∫øu c√≥ quy·ªÅn xem t·∫•t c·∫£ projects
    if (this.permissions.canViewAllProjects) return true

    return false
  }

  canEditProject(projectOwnerId: string, projectManagerId?: string, userProjectRole?: string): boolean {
    // Admin c√≥ th·ªÉ edit t·∫•t c·∫£
    if (this.userProfile.role === UserRole.ADMIN) return true

    // Owner c√≥ th·ªÉ edit
    if (projectOwnerId === this.userProfile.id) return true

    // Manager c√≥ th·ªÉ edit
    if (projectManagerId === this.userProfile.id) return true

    // N·∫øu c√≥ role manager trong project
    if (userProjectRole === 'manager') return true

    return false
  }

  canManageMembersOfProject(projectOwnerId: string, projectManagerId?: string, userProjectRole?: string): boolean {
    // Admin c√≥ th·ªÉ manage t·∫•t c·∫£
    if (this.userProfile.role === UserRole.ADMIN) return true

    // Owner c√≥ th·ªÉ manage
    if (projectOwnerId === this.userProfile.id) return true

    // Manager c√≥ th·ªÉ manage n·∫øu c√≥ quy·ªÅn
    if (
      (projectManagerId === this.userProfile.id || userProjectRole === 'manager') &&
      this.permissions.canManageProjectMembers
    ) {
      return true
    }

    return false
  }

  // Utility methods
  isAdmin(): boolean {
    return this.userProfile.role === UserRole.ADMIN
  }

  isManager(): boolean {
    return this.userProfile.role === UserRole.MANAGER
  }

  isProductEditor(): boolean {
    return this.userProfile.role === UserRole.PRODUCT_EDITOR
  }

  isProjectViewer(): boolean {
    return this.userProfile.role === UserRole.PROJECT_VIEWER
  }

  isViewer(): boolean {
    return this.userProfile.role === UserRole.VIEWER
  }

  getMaxProjects(): number | undefined {
    return this.permissions.maxProjects || this.userProfile.max_projects
  }

  getMaxTeamMembers(): number | undefined {
    return this.permissions.maxTeamMembers || this.userProfile.max_team_members
  }

  // Role description for UI
  getRoleDescription(): string {
    switch (this.userProfile.role) {
      case UserRole.ADMIN:
        return 'üëë Qu·∫£n tr·ªã vi√™n - To√†n quy·ªÅn h·ªá th·ªëng'
      case UserRole.MANAGER:
        return 'üè¢ Qu·∫£n l√Ω d·ª± √°n - Qu·∫£n l√Ω team v√† projects'
      case UserRole.PRODUCT_EDITOR:
        return '‚úèÔ∏è Bi√™n t·∫≠p vi√™n - Ch·ªânh s·ª≠a s·∫£n ph·∫©m'
      case UserRole.PROJECT_VIEWER:
        return 'üëÅÔ∏è Xem d·ª± √°n - Ch·ªâ xem th√¥ng tin project'
      case UserRole.VIEWER:
        return 'üë§ Ng∆∞·ªùi xem - Quy·ªÅn h·∫°n ch·∫ø'
      default:
        return '‚ùì Ch∆∞a x√°c ƒë·ªãnh'
    }
  }

  // Get available actions for UI
  getAvailableActions(): string[] {
    const actions: string[] = []

    if (this.canManageUsers()) actions.push('Qu·∫£n l√Ω ng∆∞·ªùi d√πng')
    if (this.canManageSettings()) actions.push('Qu·∫£n l√Ω c√†i ƒë·∫∑t')
    if (this.canCreateProjects()) actions.push('T·∫°o d·ª± √°n m·ªõi')
    if (this.canManageOwnProjects()) actions.push('Qu·∫£n l√Ω d·ª± √°n')
    if (this.canEditProducts()) actions.push('Ch·ªânh s·ª≠a s·∫£n ph·∫©m')
    if (this.canImportData()) actions.push('Import d·ªØ li·ªáu')
    if (this.canExportData()) actions.push('Export d·ªØ li·ªáu')
    if (this.canViewAllReports()) actions.push('Xem t·∫•t c·∫£ b√°o c√°o')
    else if (this.canViewOwnReports()) actions.push('Xem b√°o c√°o c·ªßa m√¨nh')

    return actions
  }
}

// Factory function
export function createPermissionChecker(userProfile: UserProfile): PermissionChecker {
  return new PermissionChecker(userProfile)
}

// Hook-ready function
export function getUserPermissions(userProfile: UserProfile): RolePermissions {
  return new PermissionChecker(userProfile)['getUserPermissions']()
}